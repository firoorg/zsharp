// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore.Migrations;
using NBitcoin;

namespace Zsharp.LightweightIndexer.Postgres.Migrations
{
    public partial class Initializes : Migration
    {
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.CreateTable(
                name: "Blocks",
                columns: table => new
                {
                    Height = table.Column<int>(nullable: false),
                    Hash = table.Column<uint256>(nullable: false),
                    MerkleRoot = table.Column<uint256>(nullable: false),
                    Nonce = table.Column<int>(nullable: false),
                    Target = table.Column<int>(nullable: false),
                    Time = table.Column<DateTime>(nullable: false),
                    Version = table.Column<int>(nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Blocks", x => x.Height);
                    table.UniqueConstraint("AK_Blocks_Hash", x => x.Hash);
                });

            migrationBuilder.CreateTable(
                name: "Transactions",
                columns: table => new
                {
                    Hash = table.Column<uint256>(nullable: false),
                    ExtraPayload = table.Column<byte[]>(nullable: true),
                    LockTime = table.Column<int>(nullable: false),
                    Type = table.Column<short>(nullable: false),
                    Version = table.Column<short>(nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Transactions", x => x.Hash);
                });

            migrationBuilder.CreateTable(
                name: "MtpData",
                columns: table => new
                {
                    BlockHash = table.Column<uint256>(nullable: false),
                    Hash = table.Column<uint256>(nullable: false),
                    Reserved1 = table.Column<uint256>(nullable: false),
                    Reserved2 = table.Column<uint256>(nullable: false),
                    Version = table.Column<int>(nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MtpData", x => x.BlockHash);
                    table.ForeignKey(
                        name: "FK_MtpData_Blocks_BlockHash",
                        column: x => x.BlockHash,
                        principalTable: "Blocks",
                        principalColumn: "Hash",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "BlockTransactions",
                columns: table => new
                {
                    BlockHash = table.Column<uint256>(nullable: false),
                    Index = table.Column<int>(nullable: false),
                    TransactionHash = table.Column<uint256>(nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BlockTransactions", x => new { x.BlockHash, x.Index });
                    table.ForeignKey(
                        name: "FK_BlockTransactions_Blocks_BlockHash",
                        column: x => x.BlockHash,
                        principalTable: "Blocks",
                        principalColumn: "Hash",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_BlockTransactions_Transactions_TransactionHash",
                        column: x => x.TransactionHash,
                        principalTable: "Transactions",
                        principalColumn: "Hash",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ElysiumTransactions",
                columns: table => new
                {
                    TransactionHash = table.Column<uint256>(nullable: false),
                    Receiver = table.Column<string>(nullable: true),
                    Sender = table.Column<string>(nullable: true),
                    Serialized = table.Column<byte[]>(nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ElysiumTransactions", x => x.TransactionHash);
                    table.ForeignKey(
                        name: "FK_ElysiumTransactions_Transactions_TransactionHash",
                        column: x => x.TransactionHash,
                        principalTable: "Transactions",
                        principalColumn: "Hash",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "Inputs",
                columns: table => new
                {
                    Index = table.Column<int>(nullable: false),
                    TransactionHash = table.Column<uint256>(nullable: false),
                    OutputHash = table.Column<uint256>(nullable: false),
                    OutputIndex = table.Column<int>(nullable: false),
                    Script = table.Column<byte[]>(nullable: false),
                    Sequence = table.Column<int>(nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Inputs", x => new { x.TransactionHash, x.Index });
                    table.ForeignKey(
                        name: "FK_Inputs_Transactions_TransactionHash",
                        column: x => x.TransactionHash,
                        principalTable: "Transactions",
                        principalColumn: "Hash",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "Outputs",
                columns: table => new
                {
                    Index = table.Column<int>(nullable: false),
                    TransactionHash = table.Column<uint256>(nullable: false),
                    Script = table.Column<byte[]>(nullable: false),
                    Value = table.Column<long>(nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Outputs", x => new { x.TransactionHash, x.Index });
                    table.ForeignKey(
                        name: "FK_Outputs_Transactions_TransactionHash",
                        column: x => x.TransactionHash,
                        principalTable: "Transactions",
                        principalColumn: "Hash",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateIndex(
                name: "IX_BlockTransactions_TransactionHash",
                table: "BlockTransactions",
                column: "TransactionHash");
        }

        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropTable(
                name: "BlockTransactions");

            migrationBuilder.DropTable(
                name: "ElysiumTransactions");

            migrationBuilder.DropTable(
                name: "Inputs");

            migrationBuilder.DropTable(
                name: "MtpData");

            migrationBuilder.DropTable(
                name: "Outputs");

            migrationBuilder.DropTable(
                name: "Blocks");

            migrationBuilder.DropTable(
                name: "Transactions");
        }
    }
}
